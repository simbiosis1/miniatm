/**
 * 
 */
package org.simbiosis.miniatm;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Set;

import net.londatiga.android.bluebamboo.P25ConnectionException;
import net.londatiga.android.bluebamboo.P25Connector;
import net.londatiga.android.bluebamboo.pockdata.PocketPos;
import net.londatiga.android.bluebamboo.util.DateUtil;
import net.londatiga.android.bluebamboo.util.FontDefine;
import net.londatiga.android.bluebamboo.util.Printer;

import org.simbiosis.miniatm.model.SavingDv;

import android.app.Activity;
import android.app.ProgressDialog;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.TextView;

/**
 * @author iwanaf
 *
 */
public class SavingDepActivity extends Activity {

	Button btnSearchSaving;
	Button btnSave;
	TextView tvCode;
	TextView tvName;
	TextView tvAddress;

	// Printer
	private ProgressDialog mProgressDlg;
	private ProgressDialog mConnectingDlg;
	private ArrayList<BluetoothDevice> mDeviceList = new ArrayList<BluetoothDevice>();
	private BluetoothAdapter mBluetoothAdapter;
	private P25Connector mConnector;

	/*
	 * (non-Javadoc)
	 * 
	 * @see android.app.Activity#onCreate(android.os.Bundle)
	 */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_saving_dep);

		tvCode = (TextView) findViewById(R.id.tvCode);
		tvName = (TextView) findViewById(R.id.tvName);
		tvAddress = (TextView) findViewById(R.id.tvAddress);
		btnSearchSaving = (Button) findViewById(R.id.btnSearchSaving);
		btnSave = (Button) findViewById(R.id.btnSave);

		btnSearchSaving.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				Intent i = new Intent(v.getContext(),
						SearchSavingActivity.class);
				startActivityForResult(i, 1);
			}
		});

		btnSave.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				printStruk();
			}
		});

		initPrinter();
		//
		connect();

	}

	@Override
	public void onDestroy() {
		unregisterReceiver(mReceiver);

		super.onDestroy();
	}

	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		switch (requestCode) {
		case 1: {
			if (resultCode == Activity.RESULT_OK) {
				SavingDv saving = data.getParcelableExtra("HASIL_LISTVIEW");
				tvCode.setText(saving.getCode());
				tvName.setText(saving.getName());
				tvAddress.setText(saving.getAddress());
			}
			break;
		}
		}
	}

	private void createBond(BluetoothDevice device) throws Exception {

		try {
			Class<?> cl = Class.forName("android.bluetooth.BluetoothDevice");
			Class<?>[] par = {};

			Method method = cl.getMethod("createBond", par);

			method.invoke(device);

		} catch (Exception e) {
			e.printStackTrace();

			throw e;
		}
	}

	private void sendData(byte[] bytes) {
		try {
			mConnector.sendData(bytes);
		} catch (P25ConnectionException e) {
			e.printStackTrace();
		}
	}

	private void initPrinter() {
		mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
		if (mBluetoothAdapter == null) {
		} else {
			if (!mBluetoothAdapter.isEnabled()) {
				Intent intent = new Intent(
						BluetoothAdapter.ACTION_REQUEST_ENABLE);
				startActivityForResult(intent, 1000);
			} else {
				Set<BluetoothDevice> pairedDevices = mBluetoothAdapter
						.getBondedDevices();

				if (pairedDevices != null) {
					mDeviceList.addAll(pairedDevices);
				}
			}

			mProgressDlg = new ProgressDialog(this);

			mProgressDlg.setMessage("Scanning...");
			mProgressDlg.setCancelable(false);
			mProgressDlg.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel",
					new DialogInterface.OnClickListener() {
						@Override
						public void onClick(DialogInterface dialog, int which) {
							dialog.dismiss();

							mBluetoothAdapter.cancelDiscovery();
						}
					});

			mConnectingDlg = new ProgressDialog(this);

			mConnectingDlg.setMessage("Connecting...");
			mConnectingDlg.setCancelable(false);

			mConnector = new P25Connector(
					new P25Connector.P25ConnectionListener() {

						@Override
						public void onStartConnecting() {
							mConnectingDlg.show();
						}

						@Override
						public void onConnectionSuccess() {
							mConnectingDlg.dismiss();
						}

						@Override
						public void onConnectionFailed(String error) {
							mConnectingDlg.dismiss();
						}

						@Override
						public void onConnectionCancelled() {
							mConnectingDlg.dismiss();
						}

						@Override
						public void onDisconnected() {
						}
					});

		}

		IntentFilter filter = new IntentFilter();

		filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);
		filter.addAction(BluetoothDevice.ACTION_FOUND);
		filter.addAction(BluetoothAdapter.ACTION_DISCOVERY_STARTED);
		filter.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
		filter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED);

		registerReceiver(mReceiver, filter);

	}

	private void connect() {
		if (mDeviceList == null || mDeviceList.size() == 0) {
			return;
		}
		BluetoothDevice device = mDeviceList.get(0);
		if (device.getBondState() == BluetoothDevice.BOND_NONE) {
			try {
				createBond(device);
			} catch (Exception e) {
				return;
			}
		}

		try {
			if (!mConnector.isConnected()) {
				mConnector.connect(device);
			} else {
				//mConnector.disconnect();
			}
		} catch (P25ConnectionException e) {
			e.printStackTrace();
		}
	}

	private void printStruk() {
		String titleStr = "STRUK SETORAN TUNAI" + "\n\n";

		StringBuilder contentSb = new StringBuilder();

		contentSb.append("REK       : 435353535435353" + "\n");
		contentSb.append("NAMA      : LORENSIUS WLT" + "\n");
		contentSb.append("TRF/DAYA  : 50/12244 VA" + "\n");
		contentSb.append("BL/TH     : 02/14" + "\n");
		contentSb.append("ST/MTR    : 0293232" + "\n");
		contentSb.append("RP TAG    : Rp. 100.000" + "\n");
		contentSb.append("JPA REF   :" + "\n");

		String message = "BMT Al Ittihad menyatakan bahwa struk ini merupakan bukti syah."
				+ "\n";
		long milis = System.currentTimeMillis();
		String date = DateUtil.timeMilisToString(milis, "dd-MM-yy / HH:mm")
				+ "\n\n";

		byte[] titleByte = Printer.printfont(titleStr, FontDefine.FONT_24PX,
				FontDefine.Align_CENTER, (byte) 0x1A,
				PocketPos.LANGUAGE_ENGLISH);

		byte[] content1Byte = Printer.printfont(contentSb.toString(),
				FontDefine.FONT_24PX, FontDefine.Align_LEFT, (byte) 0x1A,
				PocketPos.LANGUAGE_ENGLISH);

		byte[] messageByte = Printer.printfont(message, FontDefine.FONT_24PX,
				FontDefine.Align_CENTER, (byte) 0x1A,
				PocketPos.LANGUAGE_ENGLISH);

		byte[] dateByte = Printer.printfont(date, FontDefine.FONT_24PX,
				FontDefine.Align_LEFT, (byte) 0x1A, PocketPos.LANGUAGE_ENGLISH);

		byte[] totalByte = new byte[titleByte.length + content1Byte.length
				+ messageByte.length + +dateByte.length];

		int offset = 0;
		System.arraycopy(titleByte, 0, totalByte, offset, titleByte.length);
		offset += titleByte.length;

		System.arraycopy(content1Byte, 0, totalByte, offset,
				content1Byte.length);
		offset += content1Byte.length;

		System.arraycopy(messageByte, 0, totalByte, offset, messageByte.length);
		offset += messageByte.length;

		System.arraycopy(dateByte, 0, totalByte, offset, dateByte.length);

		byte[] senddata = PocketPos.FramePack(PocketPos.FRAME_TOF_PRINT,
				totalByte, 0, totalByte.length);

		sendData(senddata);
	}

	private final BroadcastReceiver mReceiver = new BroadcastReceiver() {
		public void onReceive(Context context, Intent intent) {
			String action = intent.getAction();

			if (BluetoothAdapter.ACTION_STATE_CHANGED.equals(action)) {
				final int state = intent.getIntExtra(
						BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.ERROR);

				if (state == BluetoothAdapter.STATE_ON) {
					// showEnabled();
				} else if (state == BluetoothAdapter.STATE_OFF) {
					// showDisabled();
				}
			} else if (BluetoothAdapter.ACTION_DISCOVERY_STARTED.equals(action)) {
				mDeviceList = new ArrayList<BluetoothDevice>();
				mProgressDlg.show();
			} else if (BluetoothAdapter.ACTION_DISCOVERY_FINISHED
					.equals(action)) {
				mProgressDlg.dismiss();

				// updateDeviceList();
			} else if (BluetoothDevice.ACTION_FOUND.equals(action)) {
				BluetoothDevice device = (BluetoothDevice) intent
						.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
				mDeviceList.add(device);

				// showToast("Found device " + device.getName());
			} else if (BluetoothDevice.ACTION_BOND_STATE_CHANGED.equals(action)) {
				final int state = intent
						.getIntExtra(BluetoothDevice.EXTRA_BOND_STATE,
								BluetoothDevice.ERROR);

				if (state == BluetoothDevice.BOND_BONDED) {
					// showToast("Paired");
					connect();
				}
			}
		}
	};

}
